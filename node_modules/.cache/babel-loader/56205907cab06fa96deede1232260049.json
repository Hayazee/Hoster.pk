{"ast":null,"code":"// Copyright 2011 Joyent, Inc.  All rights reserved.\nvar assert = require('assert-plus');\n\nvar crypto = require('crypto'); ///--- Exported API\n\n\nmodule.exports = {\n  /**\n   * Simply wraps up the node crypto operations for you, and returns\n   * true or false.  You are expected to pass in an object that was\n   * returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} key either an RSA private key PEM or HMAC secret.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   */\n  verifySignature: function verifySignature(parsedSignature, key) {\n    assert.object(parsedSignature, 'parsedSignature');\n    assert.string(key, 'key');\n    var alg = parsedSignature.algorithm.match(/(HMAC|RSA|DSA)-(\\w+)/);\n    if (!alg || alg.length !== 3) throw new TypeError('parsedSignature: unsupported algorithm ' + parsedSignature.algorithm);\n\n    if (alg[1] === 'HMAC') {\n      var hmac = crypto.createHmac(alg[2].toLowerCase(), key);\n      hmac.update(parsedSignature.signingString);\n      return hmac.digest('base64') === parsedSignature.signature;\n    } else {\n      var verify = crypto.createVerify(alg[0]);\n      verify.update(parsedSignature.signingString);\n      return verify.verify(key, parsedSignature.signature, 'base64');\n    }\n  }\n};","map":{"version":3,"sources":["/home/hayaz/haya/haya/hosters.pk/node_modules/http-signature/lib/verify.js"],"names":["assert","require","crypto","module","exports","verifySignature","parsedSignature","key","object","string","alg","algorithm","match","length","TypeError","hmac","createHmac","toLowerCase","update","signingString","digest","signature","verify","createVerify"],"mappings":"AAAA;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAApB,C,CAIA;;;AAEAE,MAAM,CAACC,OAAP,GAAiB;AAEf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,eAAe,EAAE,SAASA,eAAT,CAAyBC,eAAzB,EAA0CC,GAA1C,EAA+C;AAC9DP,IAAAA,MAAM,CAACQ,MAAP,CAAcF,eAAd,EAA+B,iBAA/B;AACAN,IAAAA,MAAM,CAACS,MAAP,CAAcF,GAAd,EAAmB,KAAnB;AAEA,QAAIG,GAAG,GAAGJ,eAAe,CAACK,SAAhB,CAA0BC,KAA1B,CAAgC,sBAAhC,CAAV;AACA,QAAI,CAACF,GAAD,IAAQA,GAAG,CAACG,MAAJ,KAAe,CAA3B,EACE,MAAM,IAAIC,SAAJ,CAAc,4CACAR,eAAe,CAACK,SAD9B,CAAN;;AAGF,QAAID,GAAG,CAAC,CAAD,CAAH,KAAW,MAAf,EAAuB;AACrB,UAAIK,IAAI,GAAGb,MAAM,CAACc,UAAP,CAAkBN,GAAG,CAAC,CAAD,CAAH,CAAOO,WAAP,EAAlB,EAAwCV,GAAxC,CAAX;AACAQ,MAAAA,IAAI,CAACG,MAAL,CAAYZ,eAAe,CAACa,aAA5B;AACA,aAAQJ,IAAI,CAACK,MAAL,CAAY,QAAZ,MAA0Bd,eAAe,CAACe,SAAlD;AACD,KAJD,MAIO;AACL,UAAIC,MAAM,GAAGpB,MAAM,CAACqB,YAAP,CAAoBb,GAAG,CAAC,CAAD,CAAvB,CAAb;AACAY,MAAAA,MAAM,CAACJ,MAAP,CAAcZ,eAAe,CAACa,aAA9B;AACA,aAAOG,MAAM,CAACA,MAAP,CAAcf,GAAd,EAAmBD,eAAe,CAACe,SAAnC,EAA8C,QAA9C,CAAP;AACD;AACF;AA9Bc,CAAjB","sourcesContent":["// Copyright 2011 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\n\n\n\n///--- Exported API\n\nmodule.exports = {\n\n  /**\n   * Simply wraps up the node crypto operations for you, and returns\n   * true or false.  You are expected to pass in an object that was\n   * returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} key either an RSA private key PEM or HMAC secret.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   */\n  verifySignature: function verifySignature(parsedSignature, key) {\n    assert.object(parsedSignature, 'parsedSignature');\n    assert.string(key, 'key');\n\n    var alg = parsedSignature.algorithm.match(/(HMAC|RSA|DSA)-(\\w+)/);\n    if (!alg || alg.length !== 3)\n      throw new TypeError('parsedSignature: unsupported algorithm ' +\n                          parsedSignature.algorithm);\n\n    if (alg[1] === 'HMAC') {\n      var hmac = crypto.createHmac(alg[2].toLowerCase(), key);\n      hmac.update(parsedSignature.signingString);\n      return (hmac.digest('base64') === parsedSignature.signature);\n    } else {\n      var verify = crypto.createVerify(alg[0]);\n      verify.update(parsedSignature.signingString);\n      return verify.verify(key, parsedSignature.signature, 'base64');\n    }\n  }\n\n};\n"]},"metadata":{},"sourceType":"script"}