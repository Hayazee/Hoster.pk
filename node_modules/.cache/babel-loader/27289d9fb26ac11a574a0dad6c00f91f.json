{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Haya Zeeshan\\\\Desktop\\\\haya\\\\hosting-.pk\\\\src\\\\Test.js\";\n// import React from 'react'\n// const Test = () => {\n//     return (\n//         <div>\n//         </div>\n//     )\n// }\n// export default Test\nimport React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link, useParams } from \"react-router-dom\"; // Params are placeholders in the URL that begin\n// with a colon, like the `:id` param defined in\n// the route in this example. A similar convention\n// is used for matching dynamic segments in other\n// popular web frameworks like Rails and Express.\n// export default function ParamsExample() {\n//   return (\n//     <Router>\n//       <div>\n//         <h2>Accounts</h2>\n//         <ul>\n//           <li>\n//             <Link to=\"/https://hosters.pk/\">Netflix link</Link>\n//           </li>\n//           <li>\n//             <Link to=\"/zillow-group text\">Zillow Group link</Link>\n//           </li>\n//           <li>\n//             <Link to=\"/yahoo text\">Yahoo link</Link>\n//           </li>\n//           <li>\n//             <Link to=\"/modus-create text\">Modus Create link</Link>\n//           </li>\n//         </ul>\n//         <Switch>\n//           <Route \n//             path=\"/:id\" children={<Child />} \n//             />\n//         </Switch>\n//       </div>\n//     </Router>\n//   );\n// }\n\nfunction Child() {\n  // We can use the `useParams` hook here to access\n  // the dynamic pieces of the URL.\n  let {\n    id\n  } = useParams();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"ID: \", id));\n}","map":{"version":3,"sources":["C:/Users/Haya Zeeshan/Desktop/haya/hosting-.pk/src/Test.js"],"names":["React","BrowserRouter","Router","Switch","Route","Link","useParams","Child","id"],"mappings":";AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,EAIEC,IAJF,EAKEC,SALF,QAMO,kBANP,C,CAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAT,GAAiB;AACf;AACA;AACA,MAAI;AAAEC,IAAAA;AAAF,MAASF,SAAS,EAAtB;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAASE,EAAT,CADF,CADF;AAKD","sourcesContent":["// import React from 'react'\r\n\r\n// const Test = () => {\r\n//     return (\r\n//         <div>\r\n            \r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default Test\r\n\r\n\r\nimport React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useParams\r\n} from \"react-router-dom\";\r\n\r\n// Params are placeholders in the URL that begin\r\n// with a colon, like the `:id` param defined in\r\n// the route in this example. A similar convention\r\n// is used for matching dynamic segments in other\r\n// popular web frameworks like Rails and Express.\r\n\r\n// export default function ParamsExample() {\r\n//   return (\r\n//     <Router>\r\n//       <div>\r\n//         <h2>Accounts</h2>\r\n//         <ul>\r\n//           <li>\r\n//             <Link to=\"/https://hosters.pk/\">Netflix link</Link>\r\n//           </li>\r\n//           <li>\r\n//             <Link to=\"/zillow-group text\">Zillow Group link</Link>\r\n//           </li>\r\n//           <li>\r\n//             <Link to=\"/yahoo text\">Yahoo link</Link>\r\n//           </li>\r\n//           <li>\r\n//             <Link to=\"/modus-create text\">Modus Create link</Link>\r\n//           </li>\r\n//         </ul>\r\n//         <Switch>\r\n//           <Route \r\n//             path=\"/:id\" children={<Child />} \r\n//             />\r\n//         </Switch>\r\n//       </div>\r\n//     </Router>\r\n//   );\r\n// }\r\n\r\nfunction Child() {\r\n  // We can use the `useParams` hook here to access\r\n  // the dynamic pieces of the URL.\r\n  let { id } = useParams();\r\n  \r\n  return (\r\n    <div>\r\n      <h3>ID: {id}</h3>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}