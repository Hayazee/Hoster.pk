{"ast":null,"code":"// Copyright (c) 2012, Mark Cavage. All rights reserved.\nvar assert = require('assert');\n\nvar Stream = require('stream').Stream;\n\nvar util = require('util'); ///--- Globals\n\n\nvar NDEBUG = process.env.NODE_NDEBUG || false; ///--- Messages\n\nvar ARRAY_TYPE_REQUIRED = '%s ([%s]) required';\nvar TYPE_REQUIRED = '%s (%s) is required'; ///--- Internal\n\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction uncapitalize(str) {\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\n\nfunction _() {\n  return util.format.apply(util, arguments);\n}\n\nfunction _assert(arg, type, name, stackFunc) {\n  if (!NDEBUG) {\n    name = name || type;\n    stackFunc = stackFunc || _assert.caller;\n    var t = typeof arg;\n\n    if (t !== type) {\n      throw new assert.AssertionError({\n        message: _(TYPE_REQUIRED, name, type),\n        actual: t,\n        expected: type,\n        operator: '===',\n        stackStartFunction: stackFunc\n      });\n    }\n  }\n} ///--- API\n\n\nfunction array(arr, type, name) {\n  if (!NDEBUG) {\n    name = name || type;\n\n    if (!Array.isArray(arr)) {\n      throw new assert.AssertionError({\n        message: _(ARRAY_TYPE_REQUIRED, name, type),\n        actual: typeof arr,\n        expected: 'array',\n        operator: 'Array.isArray',\n        stackStartFunction: array.caller\n      });\n    }\n\n    for (var i = 0; i < arr.length; i++) {\n      _assert(arr[i], type, name, array);\n    }\n  }\n}\n\nfunction bool(arg, name) {\n  _assert(arg, 'boolean', name, bool);\n}\n\nfunction buffer(arg, name) {\n  if (!Buffer.isBuffer(arg)) {\n    throw new assert.AssertionError({\n      message: _(TYPE_REQUIRED, name, type),\n      actual: typeof arg,\n      expected: 'buffer',\n      operator: 'Buffer.isBuffer',\n      stackStartFunction: buffer\n    });\n  }\n}\n\nfunction func(arg, name) {\n  _assert(arg, 'function', name);\n}\n\nfunction number(arg, name) {\n  _assert(arg, 'number', name);\n}\n\nfunction object(arg, name) {\n  _assert(arg, 'object', name);\n}\n\nfunction stream(arg, name) {\n  if (!(arg instanceof Stream)) {\n    throw new assert.AssertionError({\n      message: _(TYPE_REQUIRED, name, type),\n      actual: typeof arg,\n      expected: 'Stream',\n      operator: 'instanceof',\n      stackStartFunction: buffer\n    });\n  }\n}\n\nfunction string(arg, name) {\n  _assert(arg, 'string', name);\n} ///--- Exports\n\n\nmodule.exports = {\n  bool: bool,\n  buffer: buffer,\n  func: func,\n  number: number,\n  object: object,\n  stream: stream,\n  string: string\n};\nObject.keys(module.exports).forEach(function (k) {\n  if (k === 'buffer') return;\n  var name = 'arrayOf' + capitalize(k);\n  if (k === 'bool') k = 'boolean';\n  if (k === 'func') k = 'function';\n\n  module.exports[name] = function (arg, name) {\n    array(arg, k, name);\n  };\n});\nObject.keys(module.exports).forEach(function (k) {\n  var _name = 'optional' + capitalize(k);\n\n  var s = uncapitalize(k.replace('arrayOf', ''));\n  if (s === 'bool') s = 'boolean';\n  if (s === 'func') s = 'function';\n\n  if (k.indexOf('arrayOf') !== -1) {\n    module.exports[_name] = function (arg, name) {\n      if (!NDEBUG && arg !== undefined) {\n        array(arg, s, name);\n      }\n    };\n  } else {\n    module.exports[_name] = function (arg, name) {\n      if (!NDEBUG && arg !== undefined) {\n        _assert(arg, s, name);\n      }\n    };\n  }\n}); // Reexport built-in assertions\n\nObject.keys(assert).forEach(function (k) {\n  if (k === 'AssertionError') {\n    module.exports[k] = assert[k];\n    return;\n  }\n\n  module.exports[k] = function () {\n    if (!NDEBUG) {\n      assert[k].apply(assert[k], arguments);\n    }\n  };\n});","map":{"version":3,"sources":["/home/hayaz/haya/haya/hosters.pk/node_modules/assert-plus/assert.js"],"names":["assert","require","Stream","util","NDEBUG","process","env","NODE_NDEBUG","ARRAY_TYPE_REQUIRED","TYPE_REQUIRED","capitalize","str","charAt","toUpperCase","slice","uncapitalize","toLowerCase","_","format","apply","arguments","_assert","arg","type","name","stackFunc","caller","t","AssertionError","message","actual","expected","operator","stackStartFunction","array","arr","Array","isArray","i","length","bool","buffer","Buffer","isBuffer","func","number","object","stream","string","module","exports","Object","keys","forEach","k","_name","s","replace","indexOf","undefined"],"mappings":"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","sourcesContent":["// Copyright (c) 2012, Mark Cavage. All rights reserved.\n\nvar assert = require('assert');\nvar Stream = require('stream').Stream;\nvar util = require('util');\n\n\n\n///--- Globals\n\nvar NDEBUG = process.env.NODE_NDEBUG || false;\n\n\n\n///--- Messages\n\nvar ARRAY_TYPE_REQUIRED = '%s ([%s]) required';\nvar TYPE_REQUIRED = '%s (%s) is required';\n\n\n\n///--- Internal\n\nfunction capitalize(str) {\n        return (str.charAt(0).toUpperCase() + str.slice(1));\n}\n\nfunction uncapitalize(str) {\n        return (str.charAt(0).toLowerCase() + str.slice(1));\n}\n\nfunction _() {\n        return (util.format.apply(util, arguments));\n}\n\n\nfunction _assert(arg, type, name, stackFunc) {\n        if (!NDEBUG) {\n                name = name || type;\n                stackFunc = stackFunc || _assert.caller;\n                var t = typeof (arg);\n\n                if (t !== type) {\n                        throw new assert.AssertionError({\n                                message: _(TYPE_REQUIRED, name, type),\n                                actual: t,\n                                expected: type,\n                                operator: '===',\n                                stackStartFunction: stackFunc\n                        });\n                }\n        }\n}\n\n\n\n///--- API\n\nfunction array(arr, type, name) {\n        if (!NDEBUG) {\n                name = name || type;\n\n                if (!Array.isArray(arr)) {\n                        throw new assert.AssertionError({\n                                message: _(ARRAY_TYPE_REQUIRED, name, type),\n                                actual: typeof (arr),\n                                expected: 'array',\n                                operator: 'Array.isArray',\n                                stackStartFunction: array.caller\n                        });\n                }\n\n                for (var i = 0; i < arr.length; i++) {\n                        _assert(arr[i], type, name, array);\n                }\n        }\n}\n\n\nfunction bool(arg, name) {\n        _assert(arg, 'boolean', name, bool);\n}\n\n\nfunction buffer(arg, name) {\n        if (!Buffer.isBuffer(arg)) {\n                throw new assert.AssertionError({\n                        message: _(TYPE_REQUIRED, name, type),\n                        actual: typeof (arg),\n                        expected: 'buffer',\n                        operator: 'Buffer.isBuffer',\n                        stackStartFunction: buffer\n                });\n        }\n}\n\n\nfunction func(arg, name) {\n        _assert(arg, 'function', name);\n}\n\n\nfunction number(arg, name) {\n        _assert(arg, 'number', name);\n}\n\n\nfunction object(arg, name) {\n        _assert(arg, 'object', name);\n}\n\n\nfunction stream(arg, name) {\n        if (!(arg instanceof Stream)) {\n                throw new assert.AssertionError({\n                        message: _(TYPE_REQUIRED, name, type),\n                        actual: typeof (arg),\n                        expected: 'Stream',\n                        operator: 'instanceof',\n                        stackStartFunction: buffer\n                });\n        }\n}\n\n\nfunction string(arg, name) {\n        _assert(arg, 'string', name);\n}\n\n\n\n///--- Exports\n\nmodule.exports = {\n        bool: bool,\n        buffer: buffer,\n        func: func,\n        number: number,\n        object: object,\n        stream: stream,\n        string: string\n};\n\n\nObject.keys(module.exports).forEach(function (k) {\n        if (k === 'buffer')\n                return;\n\n        var name = 'arrayOf' + capitalize(k);\n\n        if (k === 'bool')\n                k = 'boolean';\n        if (k === 'func')\n                k = 'function';\n        module.exports[name] = function (arg, name) {\n                array(arg, k, name);\n        };\n});\n\nObject.keys(module.exports).forEach(function (k) {\n        var _name = 'optional' + capitalize(k);\n        var s = uncapitalize(k.replace('arrayOf', ''));\n        if (s === 'bool')\n                s = 'boolean';\n        if (s === 'func')\n                s = 'function';\n\n        if (k.indexOf('arrayOf') !== -1) {\n          module.exports[_name] = function (arg, name) {\n                  if (!NDEBUG && arg !== undefined) {\n                          array(arg, s, name);\n                  }\n          };\n        } else {\n          module.exports[_name] = function (arg, name) {\n                  if (!NDEBUG && arg !== undefined) {\n                          _assert(arg, s, name);\n                  }\n          };\n        }\n});\n\n\n// Reexport built-in assertions\nObject.keys(assert).forEach(function (k) {\n        if (k === 'AssertionError') {\n                module.exports[k] = assert[k];\n                return;\n        }\n\n        module.exports[k] = function () {\n                if (!NDEBUG) {\n                        assert[k].apply(assert[k], arguments);\n                }\n        };\n});\n"]},"metadata":{},"sourceType":"script"}