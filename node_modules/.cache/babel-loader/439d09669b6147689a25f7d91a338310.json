{"ast":null,"code":"// Load modules\nvar Crypto = require('crypto');\n\nvar Url = require('url');\n\nvar Utils = require('./utils'); // Declare internals\n\n\nvar internals = {}; // MAC normalization format version\n\nexports.headerVersion = '1'; // Prevent comparison of mac values generated with different normalized string formats\n// Supported HMAC algorithms\n\nexports.algorithms = ['sha1', 'sha256']; // Calculate the request MAC\n\n/*\r\n    type: 'header',                                 // 'header', 'bewit', 'response'\r\n    credentials: {\r\n        key: 'aoijedoaijsdlaksjdl',\r\n        algorithm: 'sha256'                         // 'sha1', 'sha256'\r\n    },\r\n    options: {\r\n        method: 'GET',\r\n        resource: '/resource?a=1&b=2',\r\n        host: 'example.com',\r\n        port: 8080,\r\n        ts: 1357718381034,\r\n        nonce: 'd3d345f',\r\n        hash: 'U4MKKSmiVxk37JCCrAVIjV/OhB3y+NdwoCr6RShbVkE=',\r\n        ext: 'app-specific-data',\r\n        app: 'hf48hd83qwkj',                        // Application id (Oz)\r\n        dlg: 'd8djwekds9cj'                         // Delegated by application id (Oz), requires options.app\r\n    }\r\n*/\n\nexports.calculateMac = function (type, credentials, options) {\n  var normalized = exports.generateNormalizedString(type, options);\n  var hmac = Crypto.createHmac(credentials.algorithm, credentials.key).update(normalized);\n  var digest = hmac.digest('base64');\n  return digest;\n};\n\nexports.generateNormalizedString = function (type, options) {\n  var normalized = 'hawk.' + exports.headerVersion + '.' + type + '\\n' + options.ts + '\\n' + options.nonce + '\\n' + options.method.toUpperCase() + '\\n' + options.resource + '\\n' + options.host.toLowerCase() + '\\n' + options.port + '\\n' + (options.hash || '') + '\\n';\n\n  if (options.ext) {\n    normalized += options.ext.replace('\\\\', '\\\\\\\\').replace('\\n', '\\\\n');\n  }\n\n  normalized += '\\n';\n\n  if (options.app) {\n    normalized += options.app + '\\n' + (options.dlg || '') + '\\n';\n  }\n\n  return normalized;\n};\n\nexports.calculatePayloadHash = function (payload, algorithm, contentType) {\n  var hash = exports.initializePayloadHash(algorithm, contentType);\n  hash.update(payload || '');\n  return exports.finalizePayloadHash(hash);\n};\n\nexports.initializePayloadHash = function (algorithm, contentType) {\n  var hash = Crypto.createHash(algorithm);\n  hash.update('hawk.' + exports.headerVersion + '.payload\\n');\n  hash.update(Utils.parseContentType(contentType) + '\\n');\n  return hash;\n};\n\nexports.finalizePayloadHash = function (hash) {\n  hash.update('\\n');\n  return hash.digest('base64');\n};\n\nexports.calculateTsMac = function (ts, credentials) {\n  var hmac = Crypto.createHmac(credentials.algorithm, credentials.key);\n  hmac.update('hawk.' + exports.headerVersion + '.ts\\n' + ts + '\\n');\n  return hmac.digest('base64');\n};","map":{"version":3,"sources":["/home/hayaz/haya/haya/hosters.pk/node_modules/whmcs/node_modules/hawk/lib/crypto.js"],"names":["Crypto","require","Url","Utils","internals","exports","headerVersion","algorithms","calculateMac","type","credentials","options","normalized","generateNormalizedString","hmac","createHmac","algorithm","key","update","digest","ts","nonce","method","toUpperCase","resource","host","toLowerCase","port","hash","ext","replace","app","dlg","calculatePayloadHash","payload","contentType","initializePayloadHash","finalizePayloadHash","createHash","parseContentType","calculateTsMac"],"mappings":"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","sourcesContent":["// Load modules\r\n\r\nvar Crypto = require('crypto');\r\nvar Url = require('url');\r\nvar Utils = require('./utils');\r\n\r\n\r\n// Declare internals\r\n\r\nvar internals = {};\r\n\r\n\r\n// MAC normalization format version\r\n\r\nexports.headerVersion = '1';                        // Prevent comparison of mac values generated with different normalized string formats\r\n\r\n\r\n// Supported HMAC algorithms\r\n\r\nexports.algorithms = ['sha1', 'sha256'];\r\n\r\n\r\n// Calculate the request MAC\r\n\r\n/*\r\n    type: 'header',                                 // 'header', 'bewit', 'response'\r\n    credentials: {\r\n        key: 'aoijedoaijsdlaksjdl',\r\n        algorithm: 'sha256'                         // 'sha1', 'sha256'\r\n    },\r\n    options: {\r\n        method: 'GET',\r\n        resource: '/resource?a=1&b=2',\r\n        host: 'example.com',\r\n        port: 8080,\r\n        ts: 1357718381034,\r\n        nonce: 'd3d345f',\r\n        hash: 'U4MKKSmiVxk37JCCrAVIjV/OhB3y+NdwoCr6RShbVkE=',\r\n        ext: 'app-specific-data',\r\n        app: 'hf48hd83qwkj',                        // Application id (Oz)\r\n        dlg: 'd8djwekds9cj'                         // Delegated by application id (Oz), requires options.app\r\n    }\r\n*/\r\n\r\nexports.calculateMac = function (type, credentials, options) {\r\n\r\n    var normalized = exports.generateNormalizedString(type, options);\r\n\r\n    var hmac = Crypto.createHmac(credentials.algorithm, credentials.key).update(normalized);\r\n    var digest = hmac.digest('base64');\r\n    return digest;\r\n};\r\n\r\n\r\nexports.generateNormalizedString = function (type, options) {\r\n\r\n    var normalized = 'hawk.' + exports.headerVersion + '.' + type + '\\n' +\r\n                     options.ts + '\\n' +\r\n                     options.nonce + '\\n' +\r\n                     options.method.toUpperCase() + '\\n' +\r\n                     options.resource + '\\n' +\r\n                     options.host.toLowerCase() + '\\n' +\r\n                     options.port + '\\n' +\r\n                     (options.hash || '') + '\\n';\r\n\r\n    if (options.ext) {\r\n        normalized += options.ext.replace('\\\\', '\\\\\\\\').replace('\\n', '\\\\n');\r\n    }\r\n\r\n    normalized += '\\n';\r\n\r\n    if (options.app) {\r\n        normalized += options.app + '\\n' +\r\n                      (options.dlg || '') + '\\n';\r\n    }\r\n\r\n    return normalized;\r\n};\r\n\r\n\r\nexports.calculatePayloadHash = function (payload, algorithm, contentType) {\r\n\r\n    var hash = exports.initializePayloadHash(algorithm, contentType);\r\n    hash.update(payload || '');\r\n    return exports.finalizePayloadHash(hash);\r\n};\r\n\r\n\r\nexports.initializePayloadHash = function (algorithm, contentType) {\r\n\r\n    var hash = Crypto.createHash(algorithm);\r\n    hash.update('hawk.' + exports.headerVersion + '.payload\\n');\r\n    hash.update(Utils.parseContentType(contentType) + '\\n');\r\n    return hash;\r\n};\r\n\r\n\r\nexports.finalizePayloadHash = function (hash) {\r\n\r\n    hash.update('\\n');\r\n    return hash.digest('base64');\r\n};\r\n\r\n\r\nexports.calculateTsMac = function (ts, credentials) {\r\n\r\n    var hmac = Crypto.createHmac(credentials.algorithm, credentials.key);\r\n    hmac.update('hawk.' + exports.headerVersion + '.ts\\n' + ts + '\\n');\r\n    return hmac.digest('base64');\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"script"}