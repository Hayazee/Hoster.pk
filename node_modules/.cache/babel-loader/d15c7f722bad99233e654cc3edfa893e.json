{"ast":null,"code":"// Copyright 2012 Joyent, Inc.  All rights reserved.\nvar assert = require('assert-plus');\n\nvar crypto = require('crypto');\n\nvar asn1 = require('asn1');\n\nvar ctype = require('ctype'); ///--- Helpers\n\n\nfunction readNext(buffer, offset) {\n  var len = ctype.ruint32(buffer, 'big', offset);\n  offset += 4;\n  var newOffset = offset + len;\n  return {\n    data: buffer.slice(offset, newOffset),\n    offset: newOffset\n  };\n}\n\nfunction writeInt(writer, buffer) {\n  writer.writeByte(0x02); // ASN1.Integer\n\n  writer.writeLength(buffer.length);\n\n  for (var i = 0; i < buffer.length; i++) writer.writeByte(buffer[i]);\n\n  return writer;\n}\n\nfunction rsaToPEM(key) {\n  var buffer;\n  var der;\n  var exponent;\n  var i;\n  var modulus;\n  var newKey = '';\n  var offset = 0;\n  var type;\n  var tmp;\n\n  try {\n    buffer = new Buffer(key.split(' ')[1], 'base64');\n    tmp = readNext(buffer, offset);\n    type = tmp.data.toString();\n    offset = tmp.offset;\n    if (type !== 'ssh-rsa') throw new Error('Invalid ssh key type: ' + type);\n    tmp = readNext(buffer, offset);\n    exponent = tmp.data;\n    offset = tmp.offset;\n    tmp = readNext(buffer, offset);\n    modulus = tmp.data;\n  } catch (e) {\n    throw new Error('Invalid ssh key: ' + key);\n  } // DER is a subset of BER\n\n\n  der = new asn1.BerWriter();\n  der.startSequence();\n  der.startSequence();\n  der.writeOID('1.2.840.113549.1.1.1');\n  der.writeNull();\n  der.endSequence();\n  der.startSequence(0x03); // bit string\n\n  der.writeByte(0x00); // Actual key\n\n  der.startSequence();\n  writeInt(der, modulus);\n  writeInt(der, exponent);\n  der.endSequence(); // bit string\n\n  der.endSequence();\n  der.endSequence();\n  tmp = der.buffer.toString('base64');\n\n  for (i = 0; i < tmp.length; i++) {\n    if (i % 64 === 0) newKey += '\\n';\n    newKey += tmp.charAt(i);\n  }\n\n  if (!/\\\\n$/.test(newKey)) newKey += '\\n';\n  return '-----BEGIN PUBLIC KEY-----' + newKey + '-----END PUBLIC KEY-----\\n';\n}\n\nfunction dsaToPEM(key) {\n  var buffer;\n  var offset = 0;\n  var tmp;\n  var der;\n  var newKey = '';\n  var type;\n  var p;\n  var q;\n  var g;\n  var y;\n\n  try {\n    buffer = new Buffer(key.split(' ')[1], 'base64');\n    tmp = readNext(buffer, offset);\n    type = tmp.data.toString();\n    offset = tmp.offset;\n    /* JSSTYLED */\n\n    if (!/^ssh-ds[as].*/.test(type)) throw new Error('Invalid ssh key type: ' + type);\n    tmp = readNext(buffer, offset);\n    p = tmp.data;\n    offset = tmp.offset;\n    tmp = readNext(buffer, offset);\n    q = tmp.data;\n    offset = tmp.offset;\n    tmp = readNext(buffer, offset);\n    g = tmp.data;\n    offset = tmp.offset;\n    tmp = readNext(buffer, offset);\n    y = tmp.data;\n  } catch (e) {\n    console.log(e.stack);\n    throw new Error('Invalid ssh key: ' + key);\n  } // DER is a subset of BER\n\n\n  der = new asn1.BerWriter();\n  der.startSequence();\n  der.startSequence();\n  der.writeOID('1.2.840.10040.4.1');\n  der.startSequence();\n  writeInt(der, p);\n  writeInt(der, q);\n  writeInt(der, g);\n  der.endSequence();\n  der.endSequence();\n  der.startSequence(0x03); // bit string\n\n  der.writeByte(0x00);\n  writeInt(der, y);\n  der.endSequence();\n  der.endSequence();\n  tmp = der.buffer.toString('base64');\n\n  for (var i = 0; i < tmp.length; i++) {\n    if (i % 64 === 0) newKey += '\\n';\n    newKey += tmp.charAt(i);\n  }\n\n  if (!/\\\\n$/.test(newKey)) newKey += '\\n';\n  return '-----BEGIN PUBLIC KEY-----' + newKey + '-----END PUBLIC KEY-----\\n';\n} ///--- API\n\n\nmodule.exports = {\n  /**\n   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.\n   *\n   * The intent of this module is to interoperate with OpenSSL only,\n   * specifically the node crypto module's `verify` method.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} PEM encoded form of the RSA public key.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} on invalid ssh key formatted data.\n   */\n  sshKeyToPEM: function sshKeyToPEM(key) {\n    assert.string(key, 'ssh_key');\n    /* JSSTYLED */\n\n    if (/^ssh-rsa.*/.test(key)) return rsaToPEM(key);\n    /* JSSTYLED */\n\n    if (/^ssh-ds[as].*/.test(key)) return dsaToPEM(key);\n    throw new Error('Only RSA and DSA public keys are allowed');\n  },\n\n  /**\n   * Generates an OpenSSH fingerprint from an ssh public key.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} key fingerprint.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} if what you passed doesn't look like an ssh public key.\n   */\n  fingerprint: function fingerprint(key) {\n    assert.string(key, 'ssh_key');\n    var pieces = key.split(' ');\n    if (!pieces || !pieces.length || pieces.length < 2) throw new Error('invalid ssh key');\n    var data = new Buffer(pieces[1], 'base64');\n    var hash = crypto.createHash('md5');\n    hash.update(data);\n    var digest = hash.digest('hex');\n    var fp = '';\n\n    for (var i = 0; i < digest.length; i++) {\n      if (i && i % 2 === 0) fp += ':';\n      fp += digest[i];\n    }\n\n    return fp;\n  }\n};","map":{"version":3,"sources":["/home/hayaz/haya/haya/hosters.pk/node_modules/http-signature/lib/util.js"],"names":["assert","require","crypto","asn1","ctype","readNext","buffer","offset","len","ruint32","newOffset","data","slice","writeInt","writer","writeByte","writeLength","length","i","rsaToPEM","key","der","exponent","modulus","newKey","type","tmp","Buffer","split","toString","Error","e","BerWriter","startSequence","writeOID","writeNull","endSequence","charAt","test","dsaToPEM","p","q","g","y","console","log","stack","module","exports","sshKeyToPEM","string","fingerprint","pieces","hash","createHash","update","digest","fp"],"mappings":"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","sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\n\nvar asn1 = require('asn1');\nvar ctype = require('ctype');\n\n\n\n///--- Helpers\n\nfunction readNext(buffer, offset) {\n  var len = ctype.ruint32(buffer, 'big', offset);\n  offset += 4;\n\n  var newOffset = offset + len;\n\n  return {\n    data: buffer.slice(offset, newOffset),\n    offset: newOffset\n  };\n}\n\n\nfunction writeInt(writer, buffer) {\n  writer.writeByte(0x02); // ASN1.Integer\n  writer.writeLength(buffer.length);\n\n  for (var i = 0; i < buffer.length; i++)\n    writer.writeByte(buffer[i]);\n\n  return writer;\n}\n\n\nfunction rsaToPEM(key) {\n  var buffer;\n  var der;\n  var exponent;\n  var i;\n  var modulus;\n  var newKey = '';\n  var offset = 0;\n  var type;\n  var tmp;\n\n  try {\n    buffer = new Buffer(key.split(' ')[1], 'base64');\n\n    tmp = readNext(buffer, offset);\n    type = tmp.data.toString();\n    offset = tmp.offset;\n\n    if (type !== 'ssh-rsa')\n      throw new Error('Invalid ssh key type: ' + type);\n\n    tmp = readNext(buffer, offset);\n    exponent = tmp.data;\n    offset = tmp.offset;\n\n    tmp = readNext(buffer, offset);\n    modulus = tmp.data;\n  } catch (e) {\n    throw new Error('Invalid ssh key: ' + key);\n  }\n\n  // DER is a subset of BER\n  der = new asn1.BerWriter();\n\n  der.startSequence();\n\n  der.startSequence();\n  der.writeOID('1.2.840.113549.1.1.1');\n  der.writeNull();\n  der.endSequence();\n\n  der.startSequence(0x03); // bit string\n  der.writeByte(0x00);\n\n  // Actual key\n  der.startSequence();\n  writeInt(der, modulus);\n  writeInt(der, exponent);\n  der.endSequence();\n\n  // bit string\n  der.endSequence();\n\n  der.endSequence();\n\n  tmp = der.buffer.toString('base64');\n  for (i = 0; i < tmp.length; i++) {\n    if ((i % 64) === 0)\n      newKey += '\\n';\n    newKey += tmp.charAt(i);\n  }\n\n  if (!/\\\\n$/.test(newKey))\n    newKey += '\\n';\n\n  return '-----BEGIN PUBLIC KEY-----' + newKey + '-----END PUBLIC KEY-----\\n';\n}\n\n\nfunction dsaToPEM(key) {\n  var buffer;\n  var offset = 0;\n  var tmp;\n  var der;\n  var newKey = '';\n\n  var type;\n  var p;\n  var q;\n  var g;\n  var y;\n\n  try {\n    buffer = new Buffer(key.split(' ')[1], 'base64');\n\n    tmp = readNext(buffer, offset);\n    type = tmp.data.toString();\n    offset = tmp.offset;\n\n    /* JSSTYLED */\n    if (!/^ssh-ds[as].*/.test(type))\n      throw new Error('Invalid ssh key type: ' + type);\n\n    tmp = readNext(buffer, offset);\n    p = tmp.data;\n    offset = tmp.offset;\n\n    tmp = readNext(buffer, offset);\n    q = tmp.data;\n    offset = tmp.offset;\n\n    tmp = readNext(buffer, offset);\n    g = tmp.data;\n    offset = tmp.offset;\n\n    tmp = readNext(buffer, offset);\n    y = tmp.data;\n  } catch (e) {\n    console.log(e.stack);\n    throw new Error('Invalid ssh key: ' + key);\n  }\n\n  // DER is a subset of BER\n  der = new asn1.BerWriter();\n\n  der.startSequence();\n\n  der.startSequence();\n  der.writeOID('1.2.840.10040.4.1');\n\n  der.startSequence();\n  writeInt(der, p);\n  writeInt(der, q);\n  writeInt(der, g);\n  der.endSequence();\n\n  der.endSequence();\n\n  der.startSequence(0x03); // bit string\n  der.writeByte(0x00);\n  writeInt(der, y);\n  der.endSequence();\n\n  der.endSequence();\n\n  tmp = der.buffer.toString('base64');\n  for (var i = 0; i < tmp.length; i++) {\n    if ((i % 64) === 0)\n      newKey += '\\n';\n    newKey += tmp.charAt(i);\n  }\n\n  if (!/\\\\n$/.test(newKey))\n    newKey += '\\n';\n\n  return '-----BEGIN PUBLIC KEY-----' + newKey + '-----END PUBLIC KEY-----\\n';\n}\n\n\n///--- API\n\nmodule.exports = {\n\n  /**\n   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.\n   *\n   * The intent of this module is to interoperate with OpenSSL only,\n   * specifically the node crypto module's `verify` method.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} PEM encoded form of the RSA public key.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} on invalid ssh key formatted data.\n   */\n  sshKeyToPEM: function sshKeyToPEM(key) {\n    assert.string(key, 'ssh_key');\n\n    /* JSSTYLED */\n    if (/^ssh-rsa.*/.test(key))\n      return rsaToPEM(key);\n\n    /* JSSTYLED */\n    if (/^ssh-ds[as].*/.test(key))\n      return dsaToPEM(key);\n\n    throw new Error('Only RSA and DSA public keys are allowed');\n  },\n\n\n  /**\n   * Generates an OpenSSH fingerprint from an ssh public key.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} key fingerprint.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} if what you passed doesn't look like an ssh public key.\n   */\n  fingerprint: function fingerprint(key) {\n    assert.string(key, 'ssh_key');\n\n    var pieces = key.split(' ');\n    if (!pieces || !pieces.length || pieces.length < 2)\n      throw new Error('invalid ssh key');\n\n    var data = new Buffer(pieces[1], 'base64');\n\n    var hash = crypto.createHash('md5');\n    hash.update(data);\n    var digest = hash.digest('hex');\n\n    var fp = '';\n    for (var i = 0; i < digest.length; i++) {\n      if (i && i % 2 === 0)\n        fp += ':';\n\n      fp += digest[i];\n    }\n\n    return fp;\n  }\n\n\n};\n"]},"metadata":{},"sourceType":"script"}